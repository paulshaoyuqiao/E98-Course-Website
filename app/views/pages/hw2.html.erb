<html>
<head>
  <title>Main | ICSBC Summer 2019</title>
  <meta charset="UTF-8">
  <meta name="description" content="ICS: Introduction to CS Bootcamp in Ruby>
  <meta name="keywords" content="Intro to CS, CS, Programming in Ruby, Berkeley, EECS">
  <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
  <%= stylesheet_link_tag asset_path("common.css" ) %>
  <%= stylesheet_link_tag asset_path("index.css" ) %>
  <%= stylesheet_link_tag asset_path("font-awesome.min.css" ) %>
  <%= stylesheet_link_tag asset_path("sunburst.css" ) %>
  <%= stylesheet_link_tag asset_path("fullcalendar.min.css" ) %>
  <%= stylesheet_link_tag asset_path("calendar.css" ) %>

  <%= stylesheet_link_tag asset_path("lab.css" ,skip_pipeline: true) %>

  <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
  <%= javascript_include_tag asset_path("script.js" ) %>
  <%= javascript_include_tag asset_path("cheet.min.js" ) %>

</head>

<body>

<div id="navbar" class="navbar-top navitems">
  <a href="/">
    <div class="navitem">Main</div>
  </a>
  <a href="/course_info">
    <div class="navitem">Course Info</div>
  </a>
  <a href="/staffsummary">
    <div class="navitem">Staff</div>
  </a>
  <a href="resources">
    <div class="navitem">Resources</div>
  </a>
</div>

<div id="content-container" class="content-spacer">
  <main id="content">
    <header class="title">Homework 2: Flow Control, Arrays, Linked Structures, and Hashes</header>
    <ul id="markdown-toc">
    <li><font color="slateblue" size="3.5"><strong>NOTE: </strong>If the math expressions are not rendering correctly after you clicked on the link to go to the problem (you are seeing a lot of "$" signs around), <strong>refresh the webpage again</strong> and everything should be rendered correctly :)</font></li>
    <li><a href="#instructions" id="markdown-toc-instructions">Instructions</a>
    <li><a href="#prime" id="markdown-toc-prime">Q1. Longest Collatz Sequence</a>
    </li>
    <li><a href="#asteroids" id="markdown-toc-asteroids">Q2. Asteroid Tracker</a></li>
    <li><a href="#adder" id="markdown-toc-adding-numbers">Q3. Adding Numbers</a></li>
    <li><a href="#file" id="markdown-toc-file">Q4. File System Sweeper</a></li>
  </ul>


  <h2 id="instructions">Instructions</h2>

  <p>Download <%= link_to 'hw2.zip', '/hw/hw2.zip'%></p>

  <p><strong>Due Date:</strong> Homework 2 is due by 11:59 pm on Sunday, 1/5</p>
  
  <p><strong>Submission:</strong> When you are done, you can submit your files to the corresponding assignment on Gradescope</p>

  <h2 id="prime">Q1. Longest Collatz Sequence</h2>
  <p>
    The following iterative sequence is defined for any <strong>positive integer</strong> $n$:
    $$
    \left\{\begin{matrix}
        n \rightarrow n/2 &  \text{ if } n \text{ is even }\\ 
        n \rightarrow 3n + 1 & \text{ if } n \text{ is odd } 
        \end{matrix}\right.
    $$

    For example, if we use the rule above and start with 13, we generate the following sequence:
    $$13 \rightarrow 40 \rightarrow 20 \rightarrow 10 \rightarrow 5 \rightarrow 16 \rightarrow 8 \rightarrow 4 \rightarrow 2 \rightarrow 1$$

    It can be seen that this sequence (starting at $13$ and finishing at $1$) <strong>contains 10 numbers in total</strong>. Although it has not been mathematically proven yet, but through numerical computation, so far we have found all the tested positive integers $n$ to <strong>finish at 1</strong>.
  </p>
    <p>Complete the following method that finds the largest positive integer less than $x$ that <strong>produces the longest possible sequence</strong>.</p>
    <pre class="prettyprint">
        def longest_collatz(x)
          # Complete the Method Body

          # Takes in a positive integer x.
          # Returns the largest positive integer less than x that produces 
          # the longest possible sequence based on the provided iterative rule.
        end
    </pre>
    <h2 id="asteroids">Q2. Asteroid Tracker</h2>
    <p><strong><font size="4" color="tomato">Introduction</font></strong></p>
    <p>
       Seeing your coding potential, NASA wants to recruit you to implement their next state-of-the-art space defense system! Part of the system requires you to build an <strong>asteroid tracker</strong> that keep track of the activites of all the near-Earth asteroids in case one were to collide with the Earth within the next few weeks, everyone would be prepared for it. 
    </p>
    <p>
       Suppose your tracker only observes incoming asteroids that are parallel to its current altitude (relative to the observatory on the ground), this helps simplify things a lot more: <strong>the asteroids observed by your tracker can only move in 2 directions, either to the left or to the right</strong>.
    </p>
    <p>
       Since the asteroids observed by the optical infrared telescope on your tracker are in fact still some distance away (in space), the chance of them colliding with each other is still quite high! Based on each asteroid's mass, which we will represent as an integer, <strong>the following set of rules applies when two asteroids $A$ and $B$ collide with each other (and in addition, suppose $A$ has a mass of $m_A$, and $B$ has a mass of $m_B$</strong>:
    </p>
    <ul>
      <li>If $A$ is heavier than $B$, then upon collision, only $A$ will remain and with a mass of $m_A - m_B$.</li>
      <li>If $B$ is heavier than $A$, then upon collision, only $B$ will remain and with a mass of $m_B - m_A$.</li>
      <li>For the asteroid that remains upon collision, it still moves in the same direction as before with the same speed.</li>
      <li>If $A$ and $B$ have the same mass, then upon collision, neither of the asteroids will remain.</li>
    </ul>
    <p><strong><font size="4" color="tomato">Problem Formulation</font></strong></p>
    <p>
       Now that you have enough context, let's talk about the collision tracker itself! For simplicity, we will represent all the asteroids observed as an array $A$ of $n$ integers $[x_1, x_2, \dots, x_n]$. In the array:
       <ul>
        <li>Each element $x_i$ represents an asteroid that comes into the tracker's scope.</li>
        <li>Suppose only one asteroid comes into the tracker's scope from one direction (left, right) at a time, an element that shows up later in the array that has the same direction as the asteroid before it comes later into the tracker's scope.</li>
        <li>We assume all asteroids have the same speed.</li>
        <li>The <strong>absolute value</strong> of $x_i$ represents the mass of the asteroid.</li>
        <li>$x_i > 0$ if the asteroid is moving from, and $x_i < 0$ if the asteroid is moving  <strong>right to left</strong>.</li>
       </ul> 
    </p>
    <p>Your job is to complete the following method that, given an array of asteroids that move into the tracker's scope, determines the asteroids that remain <strong>after all the collisions have happened</strong>.
    </p>
    <pre class="prettyprint">
        def track_collisions(A)
          # Complete the Method Body

          # Takes in an array of integers A encoding the asteroids.
          # Returns an array representing the asteroids remaining after 
          # all the collisions have happened within the tracker's scope.
        end
    </pre>
    <p>Here are a few examples:
    <ol>
      <li> For $A = [3, -4, -5]$, after all the collisions, we will have the array $[-1, -5]$ since the first two asteroids collide with each other. When they collide, the 2nd asteroid remains (because it is heavier) with a remaining mass of $4-3=1$.</li>
      <li> For $A = [-1, -2, 3]$, after all the collisions, we will have an empty array $[]$ since the 2nd and 3rd asteroids collide with each toher. When they collide, the 3rd asteroid remains with a mass of $3-2=1$. The 3rd asteroid then collides with the 1st asteroid, and since they are equally heavy, no asteroids remain afterwards.</li>
      <li> For $A = [1, 2, 3]$, after all the collisions, we will have the array $[1, 2, 3]$ since all 3 asteroids move in the same direction so they will never collide with each other.</li>
    </ol>
    </p>
  <br>
    <h2 id="adder">Q3. Adding Numbers</h2>
    <p>
      You are given two <strong>non-empty</strong> arrays $X$ and $Y$ representing two non-negative integers (the digits are in the normal orders as if we read them from left to right). 
    </p>
    <p>
      Given a base $b$ (<strong>you may assume $b \leq 10$ </strong>), complete the following method that adds the numbers represented by two arrays $X$ and $Y$ in base $b$ and returns the resulting sum in a similar array form.
    </p>
    <pre class="prettyprint">
        def add_numbers(x, y, b)
          # Complete the Method Body

          # Takes in 2 arrays representing integers X and Y in base b.
          # Returns an array representing the sum X + Y in base b.
        end
    </pre>
    <p>
      For clarification, normally we work with numbers in base 10 (we just ommit "10"). More generally, if a number $xyz$ has a base of 3, we can write it as $xyz_3$, and in base 10, this is equivalent to $3^2 x + 3^1 y + 3^0 z = 9x+3y+z$.
    </p>
    <p>
      Here are a few examples:
      <ol>
        <li>Given $X=[3, 2]$, $Y=[6, 8]$ and the base $b=10$, we will return the array $[1, 0, 0]$ since $32_{10} + 68_{10} = 100$. </li>
        <li>Given $X=[1, 1, 1, 1]$, $Y=[1]$ and the base $b=2$, we will return the array $[1, 0, 0, 0, 0]$ since $1111_2 + 1_2 = 15_{10}+1_{10} = 16_{10} = 10000_2$.</li>
      </ol> 
    </p>
    
    <h2 id="file">Q4. File System Sweeper</h2>
    <p>In this problem, you will build a feature of a file system sweeper. A file system sweeper is a helpful software on your laptop that periodically checks for files that are duplicates or no longer in use and clears them out to release more storage to you.
    </p>

    <p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p>

    <p>A group of duplicate files consists of <strong>at least two files</strong> that have exactly the same content.</p>

    <p>A single directory info string in the <strong>input</strong> list has the following format:</p>

    <p><code>"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"</code></p>

    <p>It means there are $n$ files <code>f1.txt, f2.txt ... fn.txt</code> with content <code>f1_content, f2_content ... fn_content</code>, respectively) in directory <code>root/d1/d2/.../dm</code>. Note that $n \geq 1$ and $m \geq 0$. If $m = 0$, it means the directory is just the root directory.</p>

    <p>Complete the following method which outputs a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>

    <p><code>"directory_path/file_name.txt"</code></p>

    <pre class="prettyprint">
        def find_duplicate(file_paths)
          # Complete the Method Body

          # Takes in a list of file paths (strings).
          # Returns a list of group of dupliate file paths.
        end
    </pre>

    <p>Here is an example:</p>
    <ol>
      <li>Given the file paths <code>["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)", "root 4.txt(efgh)"]</code>, we will return the following list of group of duplicate file paths: <code>[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]</code></li>
    <ol>
  </main>
</div>
</body>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [["$","$"]]}
  });
</script>
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
<script>
    $("#markdown-toc").insertBefore("#content");
</script>
</html>