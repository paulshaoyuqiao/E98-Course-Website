<html>
<head>
  <title>Optional Reading 9</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="shortcut icon" href="/assets/images/josh4.png">

  <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
  <%= stylesheet_link_tag asset_path("common.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("index.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("font-awesome.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("sunburst.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("fullcalendar.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("calendar.css", skip_pipeline: true) %>


  <%= stylesheet_link_tag asset_path("lab.css", skip_pipeline: true) %>


  <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
  <%= javascript_include_tag asset_path("script.js", skip_pipeline: true) %>
  <%= javascript_include_tag asset_path("cheet.min.js", skip_pipeline: true) %>

</head>

<body>

<div id="navbar" class="navbar-top navitems">
  <a href="/">
    <div class="navitem">Main</div>
  </a>
  <a href="#">
    <div class="navitem">Course Info</div>
  </a>
  <a href="staff_summary">
    <div class="navitem">Staff</div>
  </a>
  <a href="#">
    <div class="navitem">Screencasts</div>
  </a>
  <a href="#">
    <div class="navitem">Resources</div>
  </a>
  <a href="#">
    <div class="navitem">Office Hours</div>
  </a>
</div>

<div id="content-container" class="content-spacer">
  <main id="content">
    <header class="title">Optional Reading 9: Stacking the Recursion</header><ul id="markdown-toc">
    <li><a>Stacking the Recursion</a>
  </ul>

  <h2>Stacking the Recursion</h2>

  <p>Hopefully, you now have an idea of what recursion is. Coding-wise, it's when a method calls itself to solve a smaller subproblem. However, how does recursion work under the hood?</p>

  <p>Well first, let me introduce you to the stack.</p>

  <p>A stack is like an array, except that new items must be inserted on the top, and when you delete items, you also are only allowed to remove the top one. It's like a stack of plates: you can't access anything in the middle or bottom.</p>

  <p><%= link_to image_tag("stack.png") %></p>

  <p><em>Note: This image is not meant to contain any Endgame spoilers.</em></p>

  <p>Well it turns out, the part of memory that executes functions is a stack, and it's called, well, the stack. But instead of Marvel superheroes, it contains methods (and also it grows down instead of up, so yeah).</p>

  <p><%= link_to image_tag("stack_frame.png") %></p>

  <p>Each frame of the stack is a method, and contains stuff about this method the computer needs to know, like who it was called by, what local variables it has, etc. When you call a new method, a new frame is added under the stack. When you exit a method, a frame is popped off.</p>

  <p>Note that the stack doesn't grow very deep if you just call one method at a time:</p>

  <pre><code class="blue-code">    def f()
      print(1)
    end

    f()
    f()
    f()
  </code></pre>

  <p>In this case, even though we call <code class="blue-code">f</code> three times, we always exit it before calling it again. Because of this, the stack grows, shrinks, grows, shrinks, grows, and shrinks again. It never gets deeper than one frame (or two frames if you count the <code class="blue-code">print</code>, and three frames if you count the main method; hey I'm trying to be simple here, okay?).</p>

  <p>However, if you call a method inside another method, the stack grows deeper:</p>

  <pre><code class="blue-code">    def f()
      g()
    end

    def g()
      h()
    end

    def h()
      print(1)
    end

    f()
  </code></pre>

  <p>Okay so far, we haven't talked about recursion yet. What does the stack have to do with recursion? Well, the stack handles methods, and recursion involves calling the same method over and over again. So when you're doing recursion, you're really just asking the Ruby interpreter to create a stack data structure.</p>

  <p>Now that we have that out of the way, let's move on to the most famous debate of computer science (not really, but it's an interesting question): Which is better, iteration or recursion?</p>

  <p>If you've watched the optional recursion videos titled <em>MORE Recursion (As If You Haven't Had Enough)</em>, then you've already seen a comparison, but now that we know about stacks, the differences are easier to explain.</p>

  <p>As we've seen, any iterative algorithm can be written recursively, but some recursive algorithms, like tree recursion, cannot be converted to iteration easily. But actually, that's not entirely true. I've just told you that recursion is just iteration with a stack. So if you're allowed to use a stack, any recursion can be converted to iteration, though it might take a bit of work.</p>

  <p>Sometimes, however, you might not even need the stack, but the recursive version always uses it anyway. Because of this, recursive methods sometimes waste memory. Moreover, using the computer's stack is often less efficient than creating one yourself (for example using a Ruby array), so if you don't mind the extra work, using iteration with a stack is more efficient than using recursion. However, we don't always care that much about squeezing every last bit of efficiency out of our programs, so recursion is still very useful. Moreover, it's a great learning exercise, and it's fun!</p>

  </main>
</div>
</body>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [["$","$"]]}
  });
</script>
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script>
    $("#markdown-toc").insertBefore("#content");
</script>
</html>
