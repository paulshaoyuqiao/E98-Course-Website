<html>
<head>
  <title>Optional Reading 5</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="shortcut icon" href="/assets/images/josh4.png">

  <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
  <%= stylesheet_link_tag asset_path("common.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("index.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("font-awesome.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("sunburst.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("fullcalendar.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("calendar.css", skip_pipeline: true) %>


  <%= stylesheet_link_tag asset_path("lab.css", skip_pipeline: true) %>


  <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
  <%= javascript_include_tag asset_path("script.js", skip_pipeline: true) %>
  <%= javascript_include_tag asset_path("cheet.min.js", skip_pipeline: true) %>

</head>

<body>

<div id="navbar" class="navbar-top navitems">
  <a href="/">
    <div class="navitem">Main</div>
  </a>
  <a href="#">
    <div class="navitem">Course Info</div>
  </a>
  <a href="staff_summary">
    <div class="navitem">Staff</div>
  </a>
  <a href="scores">
    <div class="navitem">Scores</div>
  </a>
  <a href="#">
    <div class="navitem">Screencasts</div>
  </a>
  <a href="#">
    <div class="navitem">Resources</div>
  </a>
  <a href="#">
    <div class="navitem">Office Hours</div>
  </a>
</div>

<div id="content-container" class="content-spacer">
  <main id="content">
    <header class="title">Optional Reading 5: What's an Integer</header><ul id="markdown-toc">
    <li><a>What's an Integer?</a>
  </ul>

<h2>What's an Integer?</h2>

<p>You've been dealing with integers for a while now:</p>

<pre><code class="blue-code">    x = 5
</code></pre>

<p>But still, have you ever wondered: what is an integer, anyway?</p>

<p>I mean, mathematically, an integer is any number without fractional parts, like 3, 0, or -10. But what is an integer in programming? How is it stored and used?</p>

<p>Well, everything in a computer is stored as 0s and 1s. An integer is stored in its binary form:</p>

<pre><code class="blue-code">    0 -&gt; 0000
    1 -&gt; 0001
    2 -&gt; 0010
    3 -&gt; 0011
    4 -&gt; 0100
</code></pre>

<p>For example on a hard drive, this will be encoded in different directions in the material's magnetic field. When the CPU is doing calculations, it will be voltages on different wires.</p>

<p>When the computer adds or subtracts two numbers, it does the calculation in binary. This actually makes the computations very simple. The computer only converts the number to decimal when you want to print it out (<code class="blue-code">puts x</code>).</p>

<p>Wait, you say. What about negative numbers?</p>

<p>Well, that's a bit more complicated. I won't give all the details here, but most of the time we use something called two's complement. It looks something like this:</p>

<pre><code class="blue-code">    -1 -&gt; 1111
    -2 -&gt; 1110
    -3 -&gt; 1101
    -4 -&gt; 1100
</code></pre>

<p>This might look weird, but it actually makes a lot of sense in terms of efficiency. Notice that if we calculate -1 + 1, we get <code class="blue-code">1111 + 0001 = 0000</code> (the leftmost carry overflows and poofs out of existence). You will learn more about this in CS 61C.</p>

<p>There is still one problem. When you create an integer, you need to specify how much memory you give it. If you give it 4 bits of memory, then you can store 0000 to 1111, which using two's complement is the numbers -8 (<code class="blue-code">1000</code>) through 7 (<code class="blue-code">0111</code>). But I don't remember doing that when I was writing my <code class="blue-code">age_in_seconds.rb</code> program!</p>

<p>Well it turns out, when you create an integer in Java or some other statically-typed language, you do need to specify how much memory your integer is gonna have. If you try to add 1 to the biggest integer, it will overflow and become the smallest negative number. The largest possible <code class="blue-code">int</code> in Java is 2147483647, and Java programmers are forever haunted by the fear of integer overflow.</p>

<p>However in languages like Ruby and Python, the language takes care of integer overflow under the hood. When an integer is about to overflow, the program just allocates more memory to it. Isn't that smooth.</p>

<p>Okay, now we know all about integers. So then how are fractional numbers stored?</p>

<p>Oh, don't even get me started.</p>


  </main>
</div>
</body>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [["$","$"]]}
  });
</script>
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script>
    $("#markdown-toc").insertBefore("#content");
</script>
</html>
