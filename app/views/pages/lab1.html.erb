<html>

<head>
  <title>Main | ICSBC Summer 2019</title>
  <meta charset="UTF-8">
  <meta name="description" content="ICS: Introduction to CS Bootcamp in Ruby>
  <meta name="keywords" content="Intro to CS, CS, Programming in Ruby, Berkeley, EECS">
  <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
  <%= stylesheet_link_tag asset_path("common.css" ) %>
  <%= stylesheet_link_tag asset_path("index.css" ) %>
  <%= stylesheet_link_tag asset_path("font-awesome.min.css" ) %>
  <%= stylesheet_link_tag asset_path("sunburst.css" ) %>
  <%= stylesheet_link_tag asset_path("fullcalendar.min.css" ) %>
  <%= stylesheet_link_tag asset_path("calendar.css" ) %>

  <%= stylesheet_link_tag asset_path("lab.css" , skip_pipeline: true) %>

  <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
  <%= javascript_include_tag asset_path("script.js" ) %>
  <%= javascript_include_tag asset_path("cheet.min.js" ) %>

</head>

<body>

<div id="navbar" class="navbar-top navitems">
  <a href="/">
    <div class="navitem">Main</div>
  </a>
  <a href="/course_info">
    <div class="navitem">Course Info</div>
  </a>
  <a href="/staffsummary">
    <div class="navitem">Staff</div>
  </a>
  <a href="/scores">
    <div class="navitem">Scores</div>
  </a>
  <a href="resources">
    <div class="navitem">Resources</div>
  </a>
</div>

<div id="content-container" class="content-spacer">
  <main id="content">
    <header class="title">Lab1: Setup and workflow</header><ul id="markdown-toc">
    <li><a href="#f-leap-year" id="markdown-toc-f-leap-year">Starter Files
    </a></li>
    <li><a href="#how-does-a-program-work" id="markdown-toc-how-does-a-program-work">Setup</a>
    </li>
    <li><a href="#c-git-exercise" id="markdown-toc-c-git-exercise">How to Use Terminal</a></li>
    <li><a href="#b-git--local-repos" id="markdown-toc-b-git--local-repos">Lab Instructions</a></li>
        <ul>
    </ul>
    </li>

  </ul>


  <h2 id="f-leap-year">Starter Files</h2>

  <p>Download <%= link_to 'lab1.zip', '/labs/lab1_1.zip'%></p>

  <p><strong>Due Date:</strong> Lab 1 is due by 11:59 pm on Friday, 7/5</p>

    <h2 id="how-does-a-program-work">Setup</h2>

    <p><strong><font size="4" color="black">Install a Terminal</font></strong></p>

    <p>The terminal is a program that allows you to interact with your computer by entering commands.
    No matter what operating system you use (Windows, macOS, Linux), the terminal will be an essential tool for this course.</p>

    <p><strong><font size="3" color="black">macOS/Linux</font></strong></p>

    <p>If you're on a Mac or are using a form of Linux (such as Ubuntu), you already have a program called Terminal or something similar on your computer.
    Open that up and you should be good to go.</p>

    <p><strong><font size="3" color="black">Windows</font></strong></p>

    <p>For windows users, we recommend you download Git Bash</p>

    <p><strong><font size="3" color="black">Install a Text Editor</font></strong></p>

    <p>The lab runner which is included in the zip file allows you to run ruby codes. You will also need a text Editor
    where you can write Ruby codes.</p>

    <p>There are many text editors out there. The ones that we found most popular are Sublime Text 3 and Atom,
    but you are welcome to install any text editor you like.</p>

    <h2 id="c-git-exercise">How to Use Terminal</h2>

    <p>Let's check if everything was installed properly! First, open a new terminal window, if you haven't already.</p>

    <p>When you first open your terminal, you should be in your home directory, which is represented by the '~' symbol</p>

    <p><strong><font size="4" color="black">Navigating files and folders</font></strong></p>

   <ul>
    <li><strong><font size=3 color="black">ls</font></stronng></li>
      <p>In this section, we will teach you some basic Unix commands. The first one is <mark><font size=3 color="blue">
      ls</font></mark>, a command that allows you to see the contents in your current directory. A directory is the same
      as a folder. If you run this command in your home directory, you should see all the contents of your home directory.</p>
      <li><strong><font size=3 color="black">cd</font></stronng></li>
      <p>We can use cd to change directories. When we are in our home directory, we can use ls to see if
      <mark><font size=3 color="blue">Desktop</font></mark> directory is in our list of contents. If yes, you can try
      typing the following command to move into that directory.
      </p>
      <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>cd Desktop<span class="k"></span>
</code></pre></div>    </div>
      <p>Now that we are in the home directory, we can type ls in the terminal to see the list of contents in the
      Desktop directory.</p>
      <p>There are a few ways to return the the home directory:</p>
      <ul>
        <li><strong>cd .. </strong></li>
        <p>The two dots means parent directory. So you can
        use this command to go up one directory</p>
        <li><strong>cd ~</strong> (the tilde)
        </li>
        <p>The '~' represents the home directory, so we can use this command to return to the home directory
        </p>
        <li><strong>cd</strong></li>
        <p>cd on its own is a shortcut for the cd ~ command</p>
      </ul>
  </ul>
  <p><strong><font size="4" color="black">Creating new directories</font></strong></p>
  <p>The next command that we want to teach you is <mark><font size=3 color="blue">
  mkdir</font></mark>, which makes new directories. So let's try creating a new directory called ICS-bootcamp
  on your Desktop.</p>
  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>mkdir ICS-Bootcamp<span class="k"></span>
</code></pre></div>    </div>
  <p>Now a folder called ICS-bootcamp will appear on your Desktop. You can verify this by running ls again in your Desktop directory.
  </p>
  <p>Now let's navigate to this directory and create two new folders called 'Labs' and 'Homeworks'

  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>cd ~/Desktop/ICS-bootcamp<span class="k"></span>
 <span class="nv">$ </span>mkdir Homeworks<span class="nt"></span>
 <span class="nv">$ </span>mkdir labs<span class="nt"></span>
</code></pre></div>    </div>
<p>Now if we run the <strong>ls</strong> command in the ICS-bootcamp directory, we should be able to see these two folders</p>

<p><strong><font size="4" color="black">Download and Extracting Starter File</font></strong></p>
  <p>If you haven't already, you can click the box on the top of this page to download lab00.zip, which contains
  all the files you will need for this lab. After you download it, the zip file will most likely be located in a directory
  called Downloads in your home directory. You can navigate to this directory and extract this folder by running the
  following commands:</p>

  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>cd ~/Downloads<span class="k"></span>
 <span class="nv">$ </span>unzip lab0.zip<span class="nt"></span>
  </code></pre></div>    </div>

  <p>Now you have an unzipped file called lab0 in your Downloads folder. We can use the terminal command mv
  to move this file to ICS-bootcamp directory on the desktop:</p>
  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>mv ~/Downloads/lab0 ~/Desktop/ICS-bootcamp/Labs<span class="k"></span>
</code></pre></div>    </div>

  <p>Now you can try navigating to the ICS-Bootcamp using the commands we have taught you. Useful to know that
  we can also use <mark><font size=3 color="blue">cd ~/Desktop/ICS-bootcamp/Labs/lab0</font></mark>, the absolute path, to
  navigate to this directory.</p>

    <h2 id="b-git--local-repos">Lab Instructions</h2>

      <p>The lab series, WWRD (What Would Ruby Do), is meant to test you on your understanding of how code runs in Ruby, and we mimic the style of irb,
      the interactive Ruby shell that you can run on your terminal (Open your terminal and type <mark><font size=3 color="blue">
      irb</font></mark> to start a Ruby interactive session). </p>

      <div class="section">
        <h3>Running Instruction</h3>

          <p>Open up your terminal, change directory to where the folder you just downloaded, if you have not.
          Type in the following command to start your lab session:</p>
          <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ruby lab_runner.rb 1<span class="k"></span>
</code></pre></div>    </div>
          <p>Please follow the instructions in the session. Press enter to enter your response. <br>
          You have unlimited tries, but do think carefully and pay attention to the details! <br>
          <br>
          [Tip] You can exit the lab session by pressing <mark><font size=3 color="blue">ctrl</font></mark> + <mark><font size=3 color="blue">C</font></mark>,
          and your progress will be saved! Next time, simply run <mark><font size=3 color="blue">ruby lab_runner.rb 1</font></mark>
          again to resume from where you ended. <br>
          <br>
          After you finish all questions, a secret celebrity name will be displayed for submission purposes. Please see the next section. </p>
      </div>

      <div class="section">
        <h3>Submission</h3>
          Create an empty text file called <mark><font size=3 color="blue">lab1-name.txt</font></mark>,
          copy the secret name into it, NO need quotation marks. <br>
          Under the course website "scores" tab, sign in, choose the corresponding week, upload your text file
          (along with your other homework scripts that you will complete later), and submit. </p>
      </div>

  <div class="section">
    <h3>Clarifications</h3>

    <p><b>TLDR (tho you should the first time): Quick tips for getting unstuck:</b></p>
    <ul>
      <li> Check for DOUBLE quotes (a string returned is in what?), NIL (puts returns what?), and semicolons with spacecs!
      <li> Run the code in irb by typing <mark><font size=3 color="blue">irb</font></mark> in any terminal session!
      (To quit, type <mark><font size=3 color="blue">quit()</font></mark> and hit <mark><font size=3 color="blue">Enter</font></mark>.)
      <li> If things get too complicated, get a paper and write out what variables are and how they get reassigned over time.
      <li> Contact a TA to explain, please! :)
    </ul>

    <br>
    <p><b>Here comes:</b><br>
    As we said, WWRD mimics irb. However, to focus on certain parts of the code, and because we cannot accept multiple lines without spoiling some aspects of the answer,
    the answer that you type in for WWRD is different from what you would see in the irb output in several ways:<p>
    <ul>
      <li> irb uses <mark><font size=3 color="blue">=></font></mark> to separate the output from
      <mark><font size=3 color="blue">puts</font></mark> from the return value of the line, while you can omit this symbol in your answers to WWRD.
      <li> When there are multiple lines, <b> you should separate the multiple lines with <mark><font size=3 color="blue">;</font></mark> followed by a space </b>.
      <li> We do not ask for the return value of any line that is not the last line of the problem. We do, however, ask for all output from <mark><font size=3 color="blue">puts</font></mark>, no matter what line it is.
    </ul>
    So WWRD is not irb, it's pretty different. It's actually more similar to what you would get writing a <mark><font size=3 color="blue">.rb</font></mark>
    file and running it, plus the return value of the last line (and the <mark><font size=3 color="blue">;</font></mark>). <br><br>


    <b>Examples </b><br>
    This is what irb would display:
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv"></span> >>> 1 + 2
  => 3

  >>> puts "Hi"
  Hi
  => nil

  >>> a = 3
  => 3
  >>> puts a
  3
  => nil
  >>> puts(a + 2 == 4)
  false
  => nil<span class="k"></span></code></pre></div></div>
    <br>
    This is what you should type in WWRD to get the correct answer: <br>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv"></span> >>> 1 + 2
  3

  >>> puts "Hi"
  Hi; nil

  >>> a = 3
  >>> puts a
  >>> puts(a + 2 == 4)
  3; false; nil<span class="k"></span></code></pre></div></div>
    <br>
    <b><p>Other things to pay attention to:<br></b>
    When a string is returned (not printed/puts), it is returned in <b> double quotation marks </b>.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv"></span> >>> 'Loki is so handsome!'
  "Loki is so handsome!"

  >>> puts "Loki is so handsome!"
  Loki is so handsome!; nil<span class="k"></span></code></pre></div></div>
    (note the difference between returned and printed strings!)
  </div>

    <br>
    <p><b>A Deeper Dig into "puts":</b> <br>
    Ruby methods always return a value, unless there is an error. This includs <mark><font size=3 color="blue">puts</font></mark>: it not only display/prints a value on the screen but also
    returns a value, <mark><font size=3 color="blue">nil</font></mark>.
    This is slightly different from that of Python, which you will learn in CS 61A.
    Let's see a more complex example in Ruby:
  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv"></span> >>> var = puts 'OptimusPrime'
  OptimusPrime; nil

  >>> var
  nil

  >>> puts var
  nil; nil<span class="k"></span></code></pre></div></div>

  <p>Another clairifiction: the method <mark><font size=3 color="blue">print()</font></mark>
  is like <mark><font size=3 color="blue">puts()</font></mark>, but it doesn't print
  a newline at the end. So:</p>

  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv"></span> >>> print("I can’t control their fear, only my own")
  I can’t control their fear, only my own=> nil<span class="k"></span></code></pre></div></div>

  <p>We will try not to test weird cases with <mark><font size=3 color="blue">print()</font></mark> in WWRD.</p>

  <br><br><br>
  </main>
</div>
</body>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [["$","$"]]}
  });
</script>
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script>
    $("#markdown-toc").insertBefore("#content");
</script>
</html>
