<html>
<head>
  <title>Lab 1: javac, java, git | CS 61B Spring 2018</title>
  <meta charset="UTF-8">
  <meta name="description" content="Computer Science 61B: Data Structures">
  <meta name="keywords" content="CS61B, Computer Science, CS, 61B, Data Structures, Josh Hug, Berkeley, EECS">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="shortcut icon" href="/assets/images/josh4.png">

  <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
  <%= stylesheet_link_tag asset_path("common.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("index.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("font-awesome.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("sunburst.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("fullcalendar.min.css", skip_pipeline: true) %>
  <%= stylesheet_link_tag asset_path("calendar.css", skip_pipeline: true) %>


  <%= stylesheet_link_tag asset_path("lab.css", skip_pipeline: true) %>


  <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
  <%= javascript_include_tag asset_path("script.js", skip_pipeline: true) %>
  <%= javascript_include_tag asset_path("cheet.min.js", skip_pipeline: true) %>

</head>

<body>

<div id="navbar" class="navbar-top navitems">
  <a href="/">
    <div class="navitem">Main</div>
  </a>
  <a href="#">
    <div class="navitem">Course Info</div>
  </a>
  <a href="staff_summary">
    <div class="navitem">Staff</div>
  </a>
  <a href="scores">
    <div class="navitem">Scores</div>
  </a>
  <a href="#">
    <div class="navitem">Screencasts</div>
  </a>
  <a href="#">
    <div class="navitem">Resources</div>
  </a>
  <a href="#">
    <div class="navitem">Office Hours</div>
  </a>
</div>

<div id="content-container" class="content-spacer">
  <main id="content">
    <header class="title">Week 2 Optional Reading: Fun with Logic</header><ul id="markdown-toc">
    <li><a href="#how-does-a-program-work" id="markdown-toc-how-does-a-program-work">And and Or in Ruby</a>
      <ul>
        <li><a href="#compiler-vs-interpreter" id="markdown-toc-compiler-vs-interpreter">And</a></li>
        <li><a href="#the-ruby-interpreter" id="markdown-toc-the-ruby-interpreter">Or</a></li>
      </ul>
    </li>
    <li><a href="#b-git--local-repos" id="markdown-toc-b-git--local-repos">The NOT operator</a></li>
    <li><a href="#c-git-exercise" id="markdown-toc-c-git-exercise">Ternary Operator</a></li>
    
  </ul>

    <h2 id="how-does-a-program-work">Why do we need logical operators?</h2>

    <p>Although 'if' expressions are extremely useful and can provide excellent flow control, 
    sometimes more complex conditions are necessary for the level of control and logic that a program requires. 
    There are some messy ways to get around this by playing with variables and different things, 
    or you could simply nest a lot of 'if's and maybe repeat some code to achieve your goal, 
    but to trump all of these for most use cases, you could make use of some things called logical 
    operators.
    </p>

    <p>Logical operators, sometimes called boolean operators, evaluate expressions (or a singular expression 
    in the case of some) and then change what the boolean evaluation is. There are three main logical operators 
    in Ruby:</p>

   <ul>
    <li><strong>and</strong></li>
    <li><strong>or</strong></li>
   </ul>

   <p>Let's go through them:</p>


    <h4 id="compiler-vs-interpreter">And</h4>

    <p>The "and" operator in Ruby takes two expressions and returns "true" if both are true, 
    and "false" if one or more of them is false. It operates much like the word "and" does in a 
    simple English sentence -- you might say "If 1+1 is 2 AND 2+3 is 5, then do something", and 
      this can be represented in Ruby using this "and" logical operator, represented by simply 
      using the <strong>and</strong> keyword.</p>

    <p>An example:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>if username == "foo" and password == "bar"<span class="k"></span>
 <span class="nv">$ </span>	puts "Welcome, administrator!"<span class="nv"></span>
 <span class="nv">$ </span>end<span class="nv"></span>
</code></pre></div>    </div>


    <p>
    Remember that the puts statement is only executed when both conditions in the 
    if statements are true.
      </p>

    <p>Here, I want to make a clear distinction between <strong>and</strong> and <strong>&&</strong>,
    let's look at an example</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>result = true and false<span class="k"></span>
 <span class="nv">$ </span>result # => true<span class="nv"></span>
 <span class="nv">$ </span>     <span class="nv"></span>
 <span class="nv">$ </span>result = true && false<span class="nv"></span>
 <span class="nv">$ </span>result # => false<span class="nv"></span>
</code></pre></div>    </div>

<p>So why is there a difference between those two. I know when I first saw the two variants (&& and AND) 
I thought, <strong>AND</strong> is just a nicer way of writing <strong>&&</strong>. But it’s not.</p>

<p>Ruby uses Short-circuit evaluation, and so it evaluates the first argument to decide if it should continue with the second one.</p>

<p>When the first argument of the <strong>AND</strong> function evaluates to <strong>false</strong>, the overall value must be <strong>false</strong>; 
and when the first argument of the <strong>OR</strong> function evaluates to <strong>true</strong>, the overall value must be <strong>true</strong>.</p>

<p>Think about the order in which they are evaluated (the precedence).</p>

<ul>
 <li><strong>&&</strong></li>
 <li><strong>=</strong></li>
 <li><strong>and</strong></li>
</ul>

<p>So let’s apply that to the example.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>((result = true) and false) # => true    
</code></pre></div>    </div>

<p>So applying the short-circuit evaluation here, looks like this.

When the first argument of the AND function (i.e. the result = true, because = has higher precedence than and) evaluates to false, the overall value must be false. 
Well, in this case the value is not false, so the value of the first expression is returned instead.

How about the && operator?</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>(result = (true && false)) # => false    
</code></pre></div>    </div>

<p>The fact that <strong>&&</strong> has higher precedence than the assignment operator (=), makes it so that the arguments to 
the <strong>AND</strong> function are <strong>true</strong>, and <strong>false</strong>. The ones in the inner parenthesis. And because of the short-circuit evaluation, 
the first value is returned. Thus the value of the expression is <strong>true</strong>.

<p>    </p>
<p><strong><font size="4" color="black">Think Control Flow</font></strong></p>

<p>The main purpose of the and operator is actually to control the flow of logic.

You can use the and operator for chaining operations that depend on each other.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>buy_milk() and cook_breakfast() and feed_family()    
</code></pre></div>    </div>

<p>You can also think of <strong>and</strong> as a reversed <strong>if</strong> statement modifier.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>next if result = 2.even?<span class="k"></span>
 <span class="nv">$ </span># becomes<span class="nv"></span>
 <span class="nv">$ </span>result = 2.even? and next<span class="nv"></span>
</code></pre></div>    </div>

    <h4 id="the-ruby-interpreter">Or</h4>  

    <p>As you'd expect, the "or" operator in Ruby functions much like the "and" operator. 
    It takes two expressions and then checks if one or the other is true – once again this 
    is much like you'd find in a regular sentence with something like "If the user's name 
    is Joe OR he has theqa, special access code". Similarly to "and", "or" is represented in 
    Ruby by the or keyword – so once again using our username and password example, if we 
    wanted the user to have the correct username or the correct password and let them in, 
    we could write something like the following:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>if username == "foo" or password == "bar""<span class="k"></span>
 <span class="nv">$ </span>	puts "Welcome, administrator!" <span class="nv"></span>
 <span class="nv">$ </span>end<span class="nv"></span>
</code></pre></div>    </div>

    <p> In this case, the puts statement is executed as long as one of clauses in the 
    if statement is true</p>

      <p><strong><font size="4" color="black">What about or and '||'?</font></strong></p>

      <p>It’s the same thing. The right hand side is never evaluated if the left hand side is truthy. Let’s prove this.</p>

      <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>true || baz() # => true<span class="k"></span>
 <span class="nv">$ </span>false || baz() # => NoMethodError: undefined method `baz'<span class="nv"></span>
 <span class="nv">$ </span>     <span class="nv"></span>
 <span class="nv">$ </span>true or baz() # => true<span class="nv"></span>
 <span class="nv">$ </span>false or baz() # => NoMethodError: undefined method `baz'<span class="nv"></span>
</code></pre></div>    </div>

<p>So you could do something cool like this.</p>

  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>cook_dinner() or raise(RuntimeError, "Not in the mood.")
</code></pre></div>    </div>

<p>That works because the right hand side will only be evaluated if cook_dinner() evaluates to false (i.e. not truthy).</p>

<p><strong><font size="4" color="black">Think Control Flow</font></strong></p>

<p><strong>or</strong> is like a reversed unless modifier. So the previous example could be written like this.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>raise(RuntimeError, "Not in the mood.") unless cook_dinner()
</code></pre></div>    </div>

<p>Choosing the right one of these options could improve the readability of your code.</p>


<h2 id="b-git--local-repos">The NOT operator</h2>

    <p>    </p>

    <span style="white-space: pre-line">         </span>

    <p>The last logical operator we're going to talk about is a little bit different than the others. 
    The "not" operator gets an expression and inverts its boolean value – so given a true condition it
     will return false. This, once again functions as linguistics would suggest, for example "If the 
     username is not foo". The "not" operator is represented in Ruby by the not keyword, and as such 
     we could create functionality equal to if <strong>username != "foo" using if not(username == "foo")</strong>.

    <p>Let's look at an example:</p>

    <p><strong>!</strong> - the "not" operator. When you add this in front of a boolean expression it will 
    change that boolean value to its opposite.</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>irb :001 > !(4 == 4)<span class="k"></span>
 <span class="nv">$ </span>=> false<span class="nv"></span>
</code></pre></div>    </div>

<p>What happens here is Ruby first evaluates what is in the parentheses and then the ! operator changes it. 
We know that 4 == 4 would return <strong>true</strong>. If we say <strong>!true</strong> then that returns <strong>false</strong>. You can think of !true as saying "not true".</p>


   
    <h2 id="c-git-exercise">Ternary Operator</h2>

    <p>Ruby has a nice option for short and concise conditional if statements. 
    The <strong>ternary operator</strong> is a common Ruby idiom that makes a quick if/else statement easy 
    and keeps it all on one line.</p>

    <p>The ternary operator uses a combination of the <strong>'?'</strong> and <strong>':'</strong></p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span># Ternary operator example<span class="k"></span>
 <span class="nv">$ </span>irb :001 > true ? "this is true" : "this is not true"<span class="nv"></span>
 <span class="nv">$ </span> => "this is true"<span class="nv"></span>
 <span class="nv">$ </span>irb :001 > false ? "this is true" : "this is not true"<span class="nv"></span>
 <span class="nv">$ </span> => "this is not true"<span class="nv"></span>
</code></pre></div>    </div>

<p>So, how does this work? You may have inferred that first the computer evaluates what is to the left of the <strong>?</strong>. 
If the expression to the left of <strong>?</strong> is true, the code directly to the right of the <strong>?</strong> gets executed. If the code 
on the left of the <strong>?</strong> is false, then the code directly to the right of the <strong>:</strong> gets executed.</p>

<p>Ternary operators definitely come in handy as you start to get more familiar with <strong>if</strong> statements. 
If you feel like you are unsure of how this works, play around with it in irb and test some other cases out. 
Nothing can create familiarity more quickly than good ol' repeated exposure and experimentation.</p>

    
  </main>
</div>
</body>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [["$","$"]]}
  });
</script>
<script type="text/javascript"
        src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script>
    $("#markdown-toc").insertBefore("#content");
</script>
</html>